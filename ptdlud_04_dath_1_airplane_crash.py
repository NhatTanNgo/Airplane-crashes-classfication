# -*- coding: utf-8 -*-
"""Copy of PTDLUD-04_DATH#1_Airplane crash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OlAfTIXlOt0va-r3ECglp7hNuJtlv-g7

# **I. Import dataset**
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link = 'https://drive.google.com/file/d/1U1JCbYDmubyOL7pqLg1EAlWdAARvyrIK/view?usp=sharing'
file_name = 'airplane_crashes_and_fatalities_since_1908.csv'

downloaded = drive.CreateFile({'id':"1U1JCbYDmubyOL7pqLg1EAlWdAARvyrIK"})   
downloaded.GetContentFile(file_name)

"""# **II. Understanding data**

> [Nguồn dữ liệu](https://data.world/data-society/airplane-crashes)


Tập dữ liệu chứa thông tin của các vụ tai nạn máy bay từ năm 1908 đến nay. 

Ý nghĩa chi tiết của mỗi cột như sau:

*   Date: Ngày tháng năm diễn ra vụ tai nạn
*   Time: Thời gian diễn ra vụ tai nạn và được biểu diễn dưới dạng hh:mm
* Location: Địa điểm diễn ra vụ tai nạn
* Operator: Hãng hàng không của máy bay. Hãng hàng không có thể là quân đội, cá nhân, hoặc hàng hàng không dân sự Ví dụ như: Private, Military- U.S. Army… 
* Flight: Số hiệu của máy bay. Số hiệu này được hãng hàng không của máy bay đó quy định
* Route: Tuyến đường bay. Được biểu diễn địa điểm đầu đường bay - địa điểm cuối đường bay
* Type: Tên loại máy bay
* Registration: Mã seri đăng ký máy bay được ICAO (tổ chức hàng không dân dụng quốc tế cấp)
* Cn_in: Cn: construction number | In: Line number. Cn_in gồm mã seri được cấp bởi nhà sản xuất máy bay và mã số hiệu của thân máy hoặc dòng thể loại của máy bay
* Aboard: Tổng lượng người trên chuyến bay (bao gồm cả hành khách và phi hành đoàn)
* Fatalities: số ca tử vong trong vụ tai nạn
* Ground: số ca dưới mặt đất khi bị máy bay rơi xuống làm tử vong
* Summary: kết luận của cơ quan điều tra về nguyên nhân xảy ra tai nạn

**Yêu cầu phân tích**: Xây dựng mô hình Học máy để dự đoán và phân loại mức độ nghiêm trọng
của bất kỳ tai nạn máy bay nào dựa trên các sự cố trong quá khứ.

# **III. Exploring data**

##  1/ Exploring null and duplicate data
"""

import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import date, timedelta, datetime,time
import pandas as pd

df=pd.read_csv(file_name)

#Nhìn khái quát những dòng đầu tiên của tập dữ liệu
print('Số cột của tập dữ liệu:', df.shape[1])
print('Số dòng của tập dữ liệu:',df.shape[0])
df.head(10)

"""**Nhận xét**:


* Dữ liệu 5268 dòng và 13 cột dữ liệu đầu vào  
* Cột Flight, Route, Registration, cn/In  dữ liệu bị mất tương đối nhiều
*   Tần suất xuất hiện của hãng máy bay Military – German Navy tương đối nhiều.




"""

# Thống kê dữ liệu null
print('Phần trăm dữ liệu null ở mỗi cột:\n')
round((df.isnull().sum()*100)/5268,2)

"""* Dựa vào thống kê ở trên ta nhận thấy rằng cột Flight bị mất dữ liệu nhiều nhất, chiếm tới 79.71%
* Bên cạnh đó các cột như Time, route, cn_in cũng bị khuyết dữ liệu ở một ngưỡng đáng kể
* Đối với các cột còn lại thì dữ liệu bị khuyết tương đối ít, không chiếm quá 1%


"""

#Thống kê trùng lắp dữ liệu
df.duplicated()

"""* Không có dữ liệu bị trùng lắp

##  2/ Exploring distribution of data

### 2.1/ Describe numeric data
"""

#Tìm min, max, std của các cột và nhận xét
df.describe()

"""Ta nhận thấy cả 3 cột Aboard, Fatalities, Ground đều có sự chênh lệch lớn giữa giá trị lớn nhất và giá trị nhỏ nhất.


---

**Cột Aboard** (số người trên chuyến bay)

*   Số người trên chuyến bay dao động từ 0 - 644
*   Độ lệch chuẩn lớn hơn nhiều so với giá trị trung bình (43>27)
* Có thể nói dữ liệu phân bố không đều và có xu hướng lệch phải

---

**Cột Fatalities** (Số ca tử vong trong vụ tai nạn)


*   Số ca tử vong trong vụ tai nạn dao động từ 0 - 583 người
*   Số ca tử vong trung bình khoảng 20 ca ít hơn so với độ lệch chuẩn (33.2%) nên có thể thấy dữ liệu sẽ hơi lệch về bên phải

---

**Cột Ground** (Số ca tử vong dưới mặt đất do máy bay rơi xuống)

* Số ca tử vong dưới mặt đất do máy bay rơi xuống dao động từ 0 - 2750 ca
* Số ca tử vong trung bình là 1.6 ít hơn nhiều so với độ lệch chuẩn (54.00%) nên có thể thấy dữ liệu sẽ bị lệch về bên phải

#### **a. Cột Abroad**
"""

plt.figure(figsize=(16,6))

sns.boxplot(df['aboard'])

"""* Biểu đồ có nhiều giá trị outlier và lệch phải. Tuy nhiên dữ liệu ở cột này thể hiện số người trên chuyến bay và trên thực tế sức chứa của một máy bay có thể lên tới 800 nên những giá trị này có thể không phải là outlier
* Dữ liệu tập trung ở 50% sau
* Dữ liệu trải dài và phân tán không đều
"""

#Biểu đồ minh họa cho các giá trị min max

#ground = df['aboard'].value_counts()
#print(ground,'\n')

plt.figure(figsize=(16, 8))
sns.histplot(x='aboard', data = df, bins=100, kde = True)
plt.xlabel('Aboard', fontsize=12)
plt.ylabel('Quantity', fontsize=12)
plt.title("Histogram of Aboard", fontsize=18)

"""#### **b.Cột Fatalities**"""

df[df.fatalities > df.aboard].shape[0]

plt.figure(figsize=(16,6))
sns.boxplot(df['Fatalities'])

"""* Nhận thấy rằng trong tập dữ liệu không có những dòng nào mà số người tử vong > số người trên máy bay
* Biểu đồ boxplot fatalities lệch phải
* Có nhiều giá trị outlier với nhiều giá trị phân bố trải dài từ 0 đến 600.
* Biểu đồ phân tán không đồng đều
* Dữ liệu phân bố ở 50% sau.
"""

#Biểu đồ minh họa cho các giá trị min max

#ground = df['Fatalities'].value_counts()
#print(ground,'\n')
plt.figure(figsize=(16, 8))
sns.histplot(x='fatalities', data = df, bins=100, kde=True)
plt.xlabel('Fatalities', fontsize=12)
plt.ylabel('Quantity', fontsize=12)
plt.title("Histogram of Fatalities", fontsize=18)

"""#### **c. Cột Ground**"""

ground = df['Ground'].value_counts()
print(ground,'\n')

plt.figure(figsize=(16, 8))
sns.histplot(x='Ground', data = df, bins=50, kde=True)
plt.xlabel('Ground', fontsize=16)
plt.ylabel('Quantity', fontsize=16)
plt.title("Histogram of Ground", fontsize=18)
# nhận xét: các giá trị tập trung chủ yếu tại không
#Dư liệu phân bố không đều. từ min =0 đến max 2750

# Vẽ biểu đồ số vụ tai nạn theo từng năm
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
Temp = df.groupby(df.Date.dt.year)[['Date']].count() #Temp is going to be temporary data frame 
Temp = Temp.rename(columns={"Date": "Count"})
plt.figure(figsize=(12,6))
plt.style.use('bmh')
plt.plot(Temp.index, 'Count', data=Temp, color='blue', marker = ".", linewidth=1)
plt.xlabel('Year', fontsize=10)
plt.ylabel('Count', fontsize=10)
plt.title('Count of accidents by Year', loc='Center', fontsize=14)
plt.show()
#Nhận xét:
#Biểu đồ cho thấy số vụ tai nạn hằng năm tăng giảm không đồng đều.  Sau những năm 2000 số vụ tai nạn có xu hướng giảm.
#Số vụ tai nạn tăng cao và nhanh chóng vào những năm có chiếm tranh 1945,1975.
#Biểu đồ từ trước năm 1920 đến 1940 bắt đầu tăng chậm theo từng năm.
#Biểu đồ từ năm 1960 đến trước những năm 2000 luôn duy trì ở mức trên 60 vụ mỗi năm.

#Thống kê Operator
S1=df.loc[df['Operator'].str.contains('Private', na=False)]
S1['index']='Private'
df.iloc[:,3]
S2=df.loc[df['Operator'].str.contains('Military', na=False)]
S2['index']='Military'
df.iloc[:,3]
S3=df.loc[~(df['Operator'].str.contains('Military', na=False)&df['Operator'].str.contains('Private', na=False))]
S3['index']='Others'
operator = S1.append(S2).append(S3)['index'].value_counts()
print(operator,'\n')
plt.figure(figsize=(16, 8))
plt.pie(operator,
        labels = operator.index, # Nhãn của các nhóm
        autopct = '%1.1f%%', # Format hiển thị giá trị %
        shadow = False)
plt.title("Percentage of Operator", fontsize=18)

# Vẽ biểu đồ số người tử vong theo từng năm
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
Temp = df.groupby(df.Date.dt.year)[['Fatalities']].sum() #Temp is going to be temporary data frame 
Temp = Temp.rename(columns={"Fatalities": "Count"})
plt.figure(figsize=(12,6))
plt.style.use('bmh')
plt.plot(Temp.index, 'Count', data=Temp, color='blue', marker = ".", linewidth=1)
plt.xlabel('Year', fontsize=10)
plt.ylabel('Count', fontsize=10)
plt.title('Count of fatalities in accidents by Year', loc='Center', fontsize=14)
plt.show()
#Nhận xét: Số người tử vong mỗi năn tang giảm không đồng đều. Sau năm 2000 có xu hướng giảm.
#Biểu đồ giao động lớn với số ca từ 0 đến 3000.
#Từ những năm trước 1920 đến 1940 nhìn chung số nạn nhân duy trì ở mức dưới 500.
#Sau 1940 đến 2000 số nạn nhân luôn tăng giảm không đồng đều nhưng luôn duy trì ở mức cao. Từ 500 đến gần 3000.
#Từ năm 1960 đến 2000 số nạn nhân luôn ở mức trên 1000.
#Đỉnh điểm là vào những năm 1975 số ca gần mức 3000.

# Biểu đồ số lượng người tử vong trên mặt đất do các vụ tai nạn gây ra mỗi năm
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
Temp = df.groupby(df.Date.dt.year)[['Ground']].sum() #Temp is going to be temporary data frame 
Temp = Temp.rename(columns={"Ground": "Count"})
plt.figure(figsize=(16,6))
plt.style.use('bmh')
plt.xlim([1900,1960])
plt.ylim([0,150])
plt.plot(Temp.index, 'Count', data=Temp, color='blue', marker = ".", linewidth=1)
plt.xlabel('Year', fontsize=10)
plt.ylabel('Count', fontsize=10)
plt.title('Count of Ground in accidents by Year', loc='Center', fontsize=14)
plt.show()
plt.figure(figsize=(16,6))
plt.xlim([1960,2010])
plt.ylim([0,5800])
plt.plot(Temp.index, 'Count', data=Temp, color='blue', marker = ".", linewidth=1)
plt.show()
# Biểu đồ tăng giảm không đồng đều. 
# Biểu đồ có giá trị từ 0 đến hơn 5000 nạn nhân/ năm.
# Số nạn nhân vào các năm sau 1940 và sau những năm 2000 tăng cao nhanh chóng 
#so với những năm trước đó.
# Biểu đồ từ trước năm 1910 đến 1935 ổn định ở mức dưới 20 người.

# Biểu đồ số vụ tai nạn máy bay vào các tháng trong năm
import matplotlib.pylab as pl
import matplotlib.gridspec as gridspec

gs = gridspec.GridSpec(2, 2)
pl.figure(figsize=(15,10))
plt.style.use('seaborn-muted')
ax = pl.subplot(gs[0, :]) # row 0, col 0
sns.barplot(df.groupby(df.Date.dt.month)[['Date']].count().index, 'Date', data=df.groupby(df.Date.dt.month)[['Date']].count(), color='lightskyblue', linewidth=2)
plt.xticks(df.groupby(df.Date.dt.month)[['Date']].count().index-1, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.xlabel('Month', fontsize=10)
plt.ylabel('Count', fontsize=10)
plt.title('Count of accidents by Month', loc='Center', fontsize=14)
#Biểu đồ tăng giảm không đều luôn giao động từ 350 – 500 ca.
#	Vào các tháng 1, 8, 12 số tai nạn xảy ra nhiều nhất trong năm. Số vụ tai nạn đầu và cuối hàng năm là cao nhất trong năm.
#	Vào các tháng 4, 5, 6 số vụ tai nạn ít nhất trong năm.
#	Từ tháng 7 đến tháng 11 số vụ tai nạn duy trì ở mức cao hơn 400.

"""# **III. Cleansing data**

"""

# Xử lí missing data và null values
df=df.rename(columns={"Flight #": "Flight"})
df=df.drop(columns=['Flight'])# drop column Flight vì có quá nhiều dòng null
df=df.replace(np.nan, 0)# thay thế các null bằng giá trị 0